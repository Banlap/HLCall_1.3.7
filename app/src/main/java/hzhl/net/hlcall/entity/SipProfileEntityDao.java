package hzhl.net.hlcall.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SIP_PROFILE_ENTITY".
*/
public class SipProfileEntityDao extends AbstractDao<SipProfileEntity, Long> {

    public static final String TABLENAME = "SIP_PROFILE_ENTITY";

    /**
     * Properties of entity SipProfileEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UriString = new Property(1, String.class, "uriString", false, "URI_STRING");
        public final static Property Domain = new Property(2, String.class, "domain", false, "DOMAIN");
        public final static Property User = new Property(3, String.class, "user", false, "USER");
        public final static Property Code = new Property(4, String.class, "code", false, "CODE");
        public final static Property ShouQuanUser = new Property(5, String.class, "shouQuanUser", false, "SHOU_QUAN_USER");
        public final static Property IsRegist = new Property(6, boolean.class, "isRegist", false, "IS_REGIST");
        public final static Property IsChoose = new Property(7, boolean.class, "isChoose", false, "IS_CHOOSE");
        public final static Property Type = new Property(8, String.class, "type", false, "TYPE");
    }


    public SipProfileEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SipProfileEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SIP_PROFILE_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URI_STRING\" TEXT," + // 1: uriString
                "\"DOMAIN\" TEXT," + // 2: domain
                "\"USER\" TEXT," + // 3: user
                "\"CODE\" TEXT," + // 4: code
                "\"SHOU_QUAN_USER\" TEXT," + // 5: shouQuanUser
                "\"IS_REGIST\" INTEGER NOT NULL ," + // 6: isRegist
                "\"IS_CHOOSE\" INTEGER NOT NULL ," + // 7: isChoose
                "\"TYPE\" TEXT);"); // 8: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SIP_PROFILE_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SipProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uriString = entity.getUriString();
        if (uriString != null) {
            stmt.bindString(2, uriString);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(3, domain);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String shouQuanUser = entity.getShouQuanUser();
        if (shouQuanUser != null) {
            stmt.bindString(6, shouQuanUser);
        }
        stmt.bindLong(7, entity.getIsRegist() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsChoose() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SipProfileEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uriString = entity.getUriString();
        if (uriString != null) {
            stmt.bindString(2, uriString);
        }
 
        String domain = entity.getDomain();
        if (domain != null) {
            stmt.bindString(3, domain);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(4, user);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(5, code);
        }
 
        String shouQuanUser = entity.getShouQuanUser();
        if (shouQuanUser != null) {
            stmt.bindString(6, shouQuanUser);
        }
        stmt.bindLong(7, entity.getIsRegist() ? 1L: 0L);
        stmt.bindLong(8, entity.getIsChoose() ? 1L: 0L);
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(9, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SipProfileEntity readEntity(Cursor cursor, int offset) {
        SipProfileEntity entity = new SipProfileEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uriString
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // domain
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // user
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // code
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // shouQuanUser
            cursor.getShort(offset + 6) != 0, // isRegist
            cursor.getShort(offset + 7) != 0, // isChoose
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SipProfileEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUriString(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDomain(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setShouQuanUser(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsRegist(cursor.getShort(offset + 6) != 0);
        entity.setIsChoose(cursor.getShort(offset + 7) != 0);
        entity.setType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SipProfileEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SipProfileEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SipProfileEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
