package hzhl.net.hlcall.entity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SETTING_ENTITY".
*/
public class SettingEntityDao extends AbstractDao<SettingEntity, Long> {

    public static final String TABLENAME = "SETTING_ENTITY";

    /**
     * Properties of entity SettingEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property MissedCallWarn = new Property(1, int.class, "missedCallWarn", false, "MISSED_CALL_WARN");
        public final static Property IsAutoAnswerCall = new Property(2, boolean.class, "isAutoAnswerCall", false, "IS_AUTO_ANSWER_CALL");
        public final static Property IsAutoAnswerCallVideo = new Property(3, boolean.class, "isAutoAnswerCallVideo", false, "IS_AUTO_ANSWER_CALL_VIDEO");
        public final static Property IsFloat = new Property(4, boolean.class, "isFloat", false, "IS_FLOAT");
        public final static Property IsLockScreen = new Property(5, boolean.class, "isLockScreen", false, "IS_LOCK_SCREEN");
        public final static Property IsBoHaoType = new Property(6, boolean.class, "isBoHaoType", false, "IS_BO_HAO_TYPE");
        public final static Property BoHaoType = new Property(7, int.class, "boHaoType", false, "BO_HAO_TYPE");
        public final static Property IsAutoStart = new Property(8, boolean.class, "isAutoStart", false, "IS_AUTO_START");
        public final static Property FloatWindowParamsX = new Property(9, int.class, "floatWindowParamsX", false, "FLOAT_WINDOW_PARAMS_X");
        public final static Property FloatWindowParamsY = new Property(10, int.class, "floatWindowParamsY", false, "FLOAT_WINDOW_PARAMS_Y");
    }


    public SettingEntityDao(DaoConfig config) {
        super(config);
    }
    
    public SettingEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SETTING_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"MISSED_CALL_WARN\" INTEGER NOT NULL ," + // 1: missedCallWarn
                "\"IS_AUTO_ANSWER_CALL\" INTEGER NOT NULL ," + // 2: isAutoAnswerCall
                "\"IS_AUTO_ANSWER_CALL_VIDEO\" INTEGER NOT NULL ," + // 3: isAutoAnswerCallVideo
                "\"IS_FLOAT\" INTEGER NOT NULL ," + // 4: isFloat
                "\"IS_LOCK_SCREEN\" INTEGER NOT NULL ," + // 5: isLockScreen
                "\"IS_BO_HAO_TYPE\" INTEGER NOT NULL ," + // 6: isBoHaoType
                "\"BO_HAO_TYPE\" INTEGER NOT NULL ," + // 7: boHaoType
                "\"IS_AUTO_START\" INTEGER NOT NULL ," + // 8: isAutoStart
                "\"FLOAT_WINDOW_PARAMS_X\" INTEGER NOT NULL ," + // 9: floatWindowParamsX
                "\"FLOAT_WINDOW_PARAMS_Y\" INTEGER NOT NULL );"); // 10: floatWindowParamsY
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SETTING_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SettingEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMissedCallWarn());
        stmt.bindLong(3, entity.getIsAutoAnswerCall() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsAutoAnswerCallVideo() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsFloat() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsLockScreen() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsBoHaoType() ? 1L: 0L);
        stmt.bindLong(8, entity.getBoHaoType());
        stmt.bindLong(9, entity.getIsAutoStart() ? 1L: 0L);
        stmt.bindLong(10, entity.getFloatWindowParamsX());
        stmt.bindLong(11, entity.getFloatWindowParamsY());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SettingEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getMissedCallWarn());
        stmt.bindLong(3, entity.getIsAutoAnswerCall() ? 1L: 0L);
        stmt.bindLong(4, entity.getIsAutoAnswerCallVideo() ? 1L: 0L);
        stmt.bindLong(5, entity.getIsFloat() ? 1L: 0L);
        stmt.bindLong(6, entity.getIsLockScreen() ? 1L: 0L);
        stmt.bindLong(7, entity.getIsBoHaoType() ? 1L: 0L);
        stmt.bindLong(8, entity.getBoHaoType());
        stmt.bindLong(9, entity.getIsAutoStart() ? 1L: 0L);
        stmt.bindLong(10, entity.getFloatWindowParamsX());
        stmt.bindLong(11, entity.getFloatWindowParamsY());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SettingEntity readEntity(Cursor cursor, int offset) {
        SettingEntity entity = new SettingEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // missedCallWarn
            cursor.getShort(offset + 2) != 0, // isAutoAnswerCall
            cursor.getShort(offset + 3) != 0, // isAutoAnswerCallVideo
            cursor.getShort(offset + 4) != 0, // isFloat
            cursor.getShort(offset + 5) != 0, // isLockScreen
            cursor.getShort(offset + 6) != 0, // isBoHaoType
            cursor.getInt(offset + 7), // boHaoType
            cursor.getShort(offset + 8) != 0, // isAutoStart
            cursor.getInt(offset + 9), // floatWindowParamsX
            cursor.getInt(offset + 10) // floatWindowParamsY
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SettingEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setMissedCallWarn(cursor.getInt(offset + 1));
        entity.setIsAutoAnswerCall(cursor.getShort(offset + 2) != 0);
        entity.setIsAutoAnswerCallVideo(cursor.getShort(offset + 3) != 0);
        entity.setIsFloat(cursor.getShort(offset + 4) != 0);
        entity.setIsLockScreen(cursor.getShort(offset + 5) != 0);
        entity.setIsBoHaoType(cursor.getShort(offset + 6) != 0);
        entity.setBoHaoType(cursor.getInt(offset + 7));
        entity.setIsAutoStart(cursor.getShort(offset + 8) != 0);
        entity.setFloatWindowParamsX(cursor.getInt(offset + 9));
        entity.setFloatWindowParamsY(cursor.getInt(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SettingEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SettingEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SettingEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
